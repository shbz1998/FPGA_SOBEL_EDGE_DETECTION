-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\malik\iCloudDrive\Desktop\College Material\ECE_524\PROJECT\codegen\sobel_edge_detection\hdlsrc\sobel_edge_detection_fixpt.vhd
-- Created: 2022-11-23 04:08:35
-- 
-- Generated by MATLAB 9.12, MATLAB Coder 5.4 and HDL Coder 3.20
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- x_out                         ce_out        1
-- y_out                         ce_out        1
-- data_out                      ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: sobel_edge_detection_fixpt
-- Source Path: sobel_edge_detection_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.sobel_edge_detection_fixpt_pkg.ALL;

ENTITY sobel_edge_detection_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        x_in                              :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        y_in                              :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        data_in1                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        ce_out                            :   OUT   std_logic;
        x_out                             :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        y_out                             :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
        data_out                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- ufix8
        );
END sobel_edge_detection_fixpt;


ARCHITECTURE rtl OF sobel_edge_detection_fixpt IS

  -- Component Declarations
  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Constants
  CONSTANT Kx                             : vector_of_signed3(0 TO 8) := 
    (to_signed(16#1#, 3), to_signed(16#2#, 3), to_signed(16#1#, 3), to_signed(16#0#, 3), to_signed(16#0#, 3),
     to_signed(16#0#, 3), to_signed(-16#1#, 3), to_signed(-16#2#, 3), to_signed(-16#1#, 3));  -- sfix3 [9]
  CONSTANT Ky                             : vector_of_signed3(0 TO 8) := 
    (to_signed(16#1#, 3), to_signed(16#0#, 3), to_signed(-16#1#, 3), to_signed(16#2#, 3), to_signed(16#0#, 3),
     to_signed(-16#2#, 3), to_signed(16#1#, 3), to_signed(16#0#, 3), to_signed(-16#1#, 3));  -- sfix3 [9]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL x_in_unsigned                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL xTemp                            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL p53xTemp_sub_cast                : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p53xTemp_sub_temp                : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL xOutTemp                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_2                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL delayMatch_reg                   : vector_of_unsigned11(0 TO 2);  -- ufix11 [3]
  SIGNAL x_out_tmp                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL y_in_unsigned                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL yTemp                            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL p51yTemp_sub_cast                : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p51yTemp_sub_temp                : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_3                            : std_logic;
  SIGNAL tmp_4                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL yOutTemp                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_5                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL delayMatch_reg_1                 : vector_of_unsigned11(0 TO 2);  -- ufix11 [3]
  SIGNAL y_out_tmp                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_6                            : std_logic;
  SIGNAL delayMatch_reg_2                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_7                            : std_logic;
  SIGNAL data_out_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_8                            : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_9                            : std_logic;
  SIGNAL delayMatch_reg_3                 : vector_of_unsigned11(0 TO 1);  -- ufix11 [2]
  SIGNAL tmp_10                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_11                           : std_logic;
  SIGNAL p3tmp_cast                       : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_12                           : std_logic;
  SIGNAL reduced_reg_1                    : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_13                           : std_logic;
  SIGNAL delayMatch_reg_4                 : vector_of_unsigned11(0 TO 1);  -- ufix11 [2]
  SIGNAL tmp_14                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_15                           : std_logic;
  SIGNAL p3tmp_cast_1                     : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg_5                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL tmp_16                           : vector_of_signed32(0 TO 2);  -- int32 [3]
  SIGNAL tmp_0                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_1_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_2_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch_out_1                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch_1_reg                 : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL delayMatch_out_2                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch_out_3                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch_1_reg_1               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL delayMatch_1_reg_2               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL tmp_17                           : vector_of_signed32(0 TO 1);  -- int32 [2]
  SIGNAL tmp_0_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_1_2                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch_out_1_1               : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch_1_reg_3               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL delayMatch_out_2_1               : signed(31 DOWNTO 0);  -- int32
  SIGNAL delayMatch_1_reg_4               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL data_in1_unsigned                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL lbIndex                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_18                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p65tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL lineBuffer2_ram_wrenb            : std_logic;  -- ufix1
  SIGNAL tmp_19                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p59tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL lineBuffer2                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL lineBuffer2_unsigned             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_20                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p64tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_21                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_2            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_22                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p57tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL lineBuffer1_ram_wrenb            : std_logic;  -- ufix1
  SIGNAL tmp_23                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_3            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL lineBuffer1                      : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL lineBuffer1_unsigned             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL l2                               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_24                           : vector_of_signed32(0 TO 2);  -- int32 [3]
  SIGNAL tmp_25                           : vector_of_signed32(0 TO 1);  -- int32 [2]
  SIGNAL delayMatch_reg_6                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL data_in1_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL w1                               : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL tmp_26                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_0_2                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_1_3                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_2_2                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_3_1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_4_1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_5_1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_6_1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_7_1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_8_1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_1_2               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_1_reg_5               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_out_2_2               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_3_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_4                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_5                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_6                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_7                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_8                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_9                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_1_reg_6               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_7               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_8               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_9               : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_10              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_11              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_12              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_13              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL tmp_27                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_28                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_0_3                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_1_4                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_2_3                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_3_2                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_4_2                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_5_2                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_6_2                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_7_2                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_8_2                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_1_3               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_1_reg_14              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_out_2_3               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_3_2               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_4_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_5_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_6_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_7_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_8_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_out_9_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_1_reg_15              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_16              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_17              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_18              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_19              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_20              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_21              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL delayMatch_1_reg_22              : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL tmp_29                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_30                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_31                           : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL k                                : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_32                           : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL k_1                              : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL k_2                              : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_33                           : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL k_3                              : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_34                           : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL k_4                              : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_35                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL k_5                              : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_36                           : vector_of_unsigned8(0 TO 5);  -- ufix8 [6]
  SIGNAL tmp_37                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_38                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_39                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL tmp_40                           : vector_of_unsigned8(0 TO 8);  -- ufix8 [9]
  SIGNAL Gx1_1                            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL tmp_41                           : std_logic;
  SIGNAL Gy1_1                            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL tmp_42                           : std_logic;
  SIGNAL tmp_43                           : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL p21tmp_1                         : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_44                           : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL tmp_45                           : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL p23tmp_1                         : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_46                           : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Gd                               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p15Gd_add_temp                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p15Gd_cast                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p15Gd_cast_1                     : unsigned(12 DOWNTO 0);  -- ufix13_En2
  SIGNAL p15Gd_cast_2                     : unsigned(12 DOWNTO 0);  -- ufix13_En2
  SIGNAL p15Gd_cast_3                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_47                           : std_logic;
  SIGNAL ex                               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL delayMatch_reg_7                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL data_out_2                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL delayMatch_reg_8                 : vector_of_unsigned9(0 TO 1);  -- ufix9 [2]
  SIGNAL ex_1                             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_48                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_49                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_50                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_out_tmp                     : unsigned(7 DOWNTO 0);  -- ufix8

BEGIN
  u_lineBuffer2_ram : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din => data_in1,
              wr_addr => std_logic_vector(indexLogic_fixptsig),
              wr_en => lineBuffer2_ram_wrenb,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_1),
              rd_dout => lineBuffer2
              );

  u_lineBuffer1_ram_generic : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din => lineBuffer2,
              wr_addr => std_logic_vector(indexLogic_fixptsig_2),
              wr_en => lineBuffer1_ram_wrenb,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_3),
              rd_dout => lineBuffer1
              );

  x_in_unsigned <= unsigned(x_in);

  -- pixel values
  -- 
  -- initiliazing line buffers to ZERO
  -- 
  -- LINE BUFFER LOGIC
  -- 
  -- image size
  -- 
  -- declaring LINE BUFFERS
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --          Generated by MATLAB 9.12 and Fixed-Point Designer 7.4           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  p53xTemp_sub_cast <= signed(resize(x_in_unsigned, 12));
  p53xTemp_sub_temp <= p53xTemp_sub_cast - to_signed(16#001#, 12);
  xTemp <= p53xTemp_sub_temp(9 DOWNTO 0);

  
  tmp <= '1' WHEN xTemp < to_signed(16#000#, 10) ELSE
      '0';

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp46
  tmp_1 <= unsigned(resize(xTemp, 11));

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_trueregionp46
  xOutTemp <= to_unsigned(16#7D0#, 11);

  
  tmp_2 <= tmp_1 WHEN tmp = '0' ELSE
      xOutTemp;

  enb <= clk_enable;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_unsigned(16#000#, 11));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= tmp_2;
        delayMatch_reg(1 TO 2) <= delayMatch_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  x_out_tmp <= delayMatch_reg(2);

  x_out <= std_logic_vector(x_out_tmp);

  y_in_unsigned <= unsigned(y_in);

  p51yTemp_sub_cast <= signed(resize(y_in_unsigned, 12));
  p51yTemp_sub_temp <= p51yTemp_sub_cast - to_signed(16#001#, 12);
  yTemp <= p51yTemp_sub_temp(9 DOWNTO 0);

  
  tmp_3 <= '1' WHEN yTemp < to_signed(16#000#, 10) ELSE
      '0';

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp42
  tmp_4 <= unsigned(resize(yTemp, 11));

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_trueregionp42
  yOutTemp <= to_unsigned(16#7D0#, 11);

  
  tmp_5 <= tmp_4 WHEN tmp_3 = '0' ELSE
      yOutTemp;

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_1 <= (OTHERS => to_unsigned(16#000#, 11));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_1(0) <= tmp_5;
        delayMatch_reg_1(1 TO 2) <= delayMatch_reg_1(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;

  y_out_tmp <= delayMatch_reg_1(2);

  y_out <= std_logic_vector(y_out_tmp);

  
  tmp_6 <= '1' WHEN (tmp_5 < to_unsigned(16#200#, 11)) AND (tmp_2 < to_unsigned(16#200#, 11)) ELSE
      '0';

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_2(0) <= tmp_6;
        delayMatch_reg_2(1) <= delayMatch_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;

  tmp_7 <= delayMatch_reg_2(1);

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp3
  data_out_1 <= to_unsigned(16#00#, 8);

  
  tmp_8 <= '1' WHEN tmp_2 = to_unsigned(16#000#, 11) ELSE
      '0';

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reduced_reg(0) <= tmp_8;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  tmp_9 <= reduced_reg(1);

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_3 <= (OTHERS => to_unsigned(16#000#, 11));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_3(0) <= tmp_2;
        delayMatch_reg_3(1) <= delayMatch_reg_3(0);
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;

  tmp_10 <= delayMatch_reg_3(1);

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp32
  p3tmp_cast <= signed(resize(tmp_10, 13));
  
  tmp_11 <= '1' WHEN p3tmp_cast = to_signed(16#01FF#, 13) ELSE
      '0';

  
  tmp_12 <= '1' WHEN tmp_5 = to_unsigned(16#000#, 11) ELSE
      '0';

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reduced_reg_1(0) <= tmp_12;
        reduced_reg_1(1) <= reduced_reg_1(0);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  tmp_13 <= reduced_reg_1(1);

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_4 <= (OTHERS => to_unsigned(16#000#, 11));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_4(0) <= tmp_5;
        delayMatch_reg_4(1) <= delayMatch_reg_4(0);
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;

  tmp_14 <= delayMatch_reg_4(1);

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp40
  p3tmp_cast_1 <= signed(resize(tmp_14, 13));
  
  tmp_15 <= '1' WHEN p3tmp_cast_1 = to_signed(16#01FF#, 13) ELSE
      '0';

  stateControl_1 <= '1';

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_5 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_5(0) <= stateControl_1;
        delayMatch_reg_5(1) <= delayMatch_reg_5(0);
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;

  stateControl_2 <= delayMatch_reg_5(1);

  enb_gated <= stateControl_2 AND clk_enable;


  tmp_16_gen: FOR t_0 IN 0 TO 2 GENERATE
    tmp_16(t_0) <= to_signed(t_0, 32);
  END GENERATE tmp_16_gen;


  tmp_0 <= tmp_16(0);

  delayMatch_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_1_reg <= (OTHERS => to_signed(0, 32));
      delayMatch_1_reg_1 <= (OTHERS => to_signed(0, 32));
      delayMatch_1_reg_2 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_1_reg(0) <= tmp_0;
        delayMatch_1_reg(1) <= delayMatch_1_reg(0);
        delayMatch_1_reg_1(0) <= tmp_1_1;
        delayMatch_1_reg_1(1) <= delayMatch_1_reg_1(0);
        delayMatch_1_reg_2(0) <= tmp_2_1;
        delayMatch_1_reg_2(1) <= delayMatch_1_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_1_1_process;

  delayMatch_out_1 <= delayMatch_1_reg(1);
  delayMatch_out_2 <= delayMatch_1_reg_1(1);
  delayMatch_out_3 <= delayMatch_1_reg_2(1);

  tmp_1_1 <= tmp_16(1);

  tmp_2_1 <= tmp_16(2);


  tmp_17_gen: FOR t_01 IN 0 TO 1 GENERATE
    tmp_17(t_01) <= to_signed(1 + t_01, 32);
  END GENERATE tmp_17_gen;


  tmp_0_1 <= tmp_17(0);

  delayMatch_1_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_1_reg_3 <= (OTHERS => to_signed(0, 32));
      delayMatch_1_reg_4 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_1_reg_3(0) <= tmp_0_1;
        delayMatch_1_reg_3(1) <= delayMatch_1_reg_3(0);
        delayMatch_1_reg_4(0) <= tmp_1_2;
        delayMatch_1_reg_4(1) <= delayMatch_1_reg_4(0);
      END IF;
    END IF;
  END PROCESS delayMatch_1_2_process;

  delayMatch_out_1_1 <= delayMatch_1_reg_3(1);
  delayMatch_out_2_1 <= delayMatch_1_reg_4(1);

  tmp_1_2 <= tmp_17(1);

  data_in1_unsigned <= unsigned(data_in1);

  -- line buffer data valid: HIGH OR LOW
  lbIndex <= resize(x_in_unsigned, 10) + to_unsigned(16#001#, 10);

  p65tmp_sub_cast <= signed(resize(lbIndex, 32));
  tmp_18 <= p65tmp_sub_cast - 1;

  indexLogic_fixptsig <= unsigned(tmp_18(8 DOWNTO 0));

  lineBuffer2_ram_wrenb <= '1';

  p59tmp_sub_cast <= signed(resize(lbIndex, 32));
  tmp_19 <= p59tmp_sub_cast - 1;

  indexLogic_fixptsig_1 <= unsigned(tmp_19(8 DOWNTO 0));

  -- write value in the line buffer
  lineBuffer2_unsigned <= unsigned(lineBuffer2);

  p64tmp_sub_cast <= signed(resize(lbIndex, 32));
  tmp_20 <= p64tmp_sub_cast - 1;

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_21 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_21 <= tmp_20;
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;


  indexLogic_fixptsig_2 <= unsigned(tmp_21(8 DOWNTO 0));

  -- increment line buffer index
  p57tmp_sub_cast <= signed(resize(lbIndex, 32));
  tmp_22 <= p57tmp_sub_cast - 1;

  lineBuffer1_ram_wrenb <= '1';

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_23 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_23 <= tmp_22;
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;


  indexLogic_fixptsig_3 <= unsigned(tmp_23(8 DOWNTO 0));

  lineBuffer1_unsigned <= unsigned(lineBuffer1);

  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      l2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        l2 <= lineBuffer2_unsigned;
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;


  tmp_24(0) <= delayMatch_out_1;
  tmp_24(1) <= delayMatch_out_2;
  tmp_24(2) <= delayMatch_out_3;

  tmp_25(0) <= delayMatch_out_1_1;
  tmp_25(1) <= delayMatch_out_2_1;

  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_6 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_6(0) <= data_in1_unsigned;
        delayMatch_reg_6(1) <= delayMatch_reg_6(0);
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;

  data_in1_1 <= delayMatch_reg_6(1);

  w1(0) <= lineBuffer1_unsigned;
  w1(1) <= l2;
  w1(2) <= data_in1_1;

  tmp_26 <= (OTHERS => to_unsigned(16#00#, 8));

  tmp_0_2 <= tmp_26(0);

  delayMatch_1_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_1_reg_5 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_6 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_7 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_8 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_9 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_10 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_11 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_12 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_13 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_1_reg_5(0) <= tmp_0_2;
        delayMatch_1_reg_5(1) <= delayMatch_1_reg_5(0);
        delayMatch_1_reg_6(0) <= tmp_1_3;
        delayMatch_1_reg_6(1) <= delayMatch_1_reg_6(0);
        delayMatch_1_reg_7(0) <= tmp_2_2;
        delayMatch_1_reg_7(1) <= delayMatch_1_reg_7(0);
        delayMatch_1_reg_8(0) <= tmp_3_1;
        delayMatch_1_reg_8(1) <= delayMatch_1_reg_8(0);
        delayMatch_1_reg_9(0) <= tmp_4_1;
        delayMatch_1_reg_9(1) <= delayMatch_1_reg_9(0);
        delayMatch_1_reg_10(0) <= tmp_5_1;
        delayMatch_1_reg_10(1) <= delayMatch_1_reg_10(0);
        delayMatch_1_reg_11(0) <= tmp_6_1;
        delayMatch_1_reg_11(1) <= delayMatch_1_reg_11(0);
        delayMatch_1_reg_12(0) <= tmp_7_1;
        delayMatch_1_reg_12(1) <= delayMatch_1_reg_12(0);
        delayMatch_1_reg_13(0) <= tmp_8_1;
        delayMatch_1_reg_13(1) <= delayMatch_1_reg_13(0);
      END IF;
    END IF;
  END PROCESS delayMatch_1_3_process;

  delayMatch_out_1_2 <= delayMatch_1_reg_5(1);
  delayMatch_out_2_2 <= delayMatch_1_reg_6(1);
  delayMatch_out_3_1 <= delayMatch_1_reg_7(1);
  delayMatch_out_4 <= delayMatch_1_reg_8(1);
  delayMatch_out_5 <= delayMatch_1_reg_9(1);
  delayMatch_out_6 <= delayMatch_1_reg_10(1);
  delayMatch_out_7 <= delayMatch_1_reg_11(1);
  delayMatch_out_8 <= delayMatch_1_reg_12(1);
  delayMatch_out_9 <= delayMatch_1_reg_13(1);

  tmp_1_3 <= tmp_26(1);

  tmp_2_2 <= tmp_26(2);

  tmp_3_1 <= tmp_26(3);

  tmp_4_1 <= tmp_26(4);

  tmp_5_1 <= tmp_26(5);

  tmp_6_1 <= tmp_26(6);

  tmp_7_1 <= tmp_26(7);

  tmp_8_1 <= tmp_26(8);

  tmp_27(0) <= delayMatch_out_1_2;
  tmp_27(1) <= delayMatch_out_2_2;
  tmp_27(2) <= delayMatch_out_3_1;
  tmp_27(3) <= delayMatch_out_4;
  tmp_27(4) <= delayMatch_out_5;
  tmp_27(5) <= delayMatch_out_6;
  tmp_27(6) <= delayMatch_out_7;
  tmp_27(7) <= delayMatch_out_8;
  tmp_27(8) <= delayMatch_out_9;

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt
  tmp_28 <= (OTHERS => to_unsigned(16#00#, 8));

  tmp_0_3 <= tmp_28(0);

  delayMatch_1_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_1_reg_14 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_15 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_16 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_17 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_18 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_19 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_20 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_21 <= (OTHERS => to_unsigned(16#00#, 8));
      delayMatch_1_reg_22 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_1_reg_14(0) <= tmp_0_3;
        delayMatch_1_reg_14(1) <= delayMatch_1_reg_14(0);
        delayMatch_1_reg_15(0) <= tmp_1_4;
        delayMatch_1_reg_15(1) <= delayMatch_1_reg_15(0);
        delayMatch_1_reg_16(0) <= tmp_2_3;
        delayMatch_1_reg_16(1) <= delayMatch_1_reg_16(0);
        delayMatch_1_reg_17(0) <= tmp_3_2;
        delayMatch_1_reg_17(1) <= delayMatch_1_reg_17(0);
        delayMatch_1_reg_18(0) <= tmp_4_2;
        delayMatch_1_reg_18(1) <= delayMatch_1_reg_18(0);
        delayMatch_1_reg_19(0) <= tmp_5_2;
        delayMatch_1_reg_19(1) <= delayMatch_1_reg_19(0);
        delayMatch_1_reg_20(0) <= tmp_6_2;
        delayMatch_1_reg_20(1) <= delayMatch_1_reg_20(0);
        delayMatch_1_reg_21(0) <= tmp_7_2;
        delayMatch_1_reg_21(1) <= delayMatch_1_reg_21(0);
        delayMatch_1_reg_22(0) <= tmp_8_2;
        delayMatch_1_reg_22(1) <= delayMatch_1_reg_22(0);
      END IF;
    END IF;
  END PROCESS delayMatch_1_4_process;

  delayMatch_out_1_3 <= delayMatch_1_reg_14(1);
  delayMatch_out_2_3 <= delayMatch_1_reg_15(1);
  delayMatch_out_3_2 <= delayMatch_1_reg_16(1);
  delayMatch_out_4_1 <= delayMatch_1_reg_17(1);
  delayMatch_out_5_1 <= delayMatch_1_reg_18(1);
  delayMatch_out_6_1 <= delayMatch_1_reg_19(1);
  delayMatch_out_7_1 <= delayMatch_1_reg_20(1);
  delayMatch_out_8_1 <= delayMatch_1_reg_21(1);
  delayMatch_out_9_1 <= delayMatch_1_reg_22(1);

  tmp_1_4 <= tmp_28(1);

  tmp_2_3 <= tmp_28(2);

  tmp_3_2 <= tmp_28(3);

  tmp_4_2 <= tmp_28(4);

  tmp_5_2 <= tmp_28(5);

  tmp_6_2 <= tmp_28(6);

  tmp_7_2 <= tmp_28(7);

  tmp_8_2 <= tmp_28(8);

  tmp_29(0) <= delayMatch_out_1_3;
  tmp_29(1) <= delayMatch_out_2_3;
  tmp_29(2) <= delayMatch_out_3_2;
  tmp_29(3) <= delayMatch_out_4_1;
  tmp_29(4) <= delayMatch_out_5_1;
  tmp_29(5) <= delayMatch_out_6_1;
  tmp_29(6) <= delayMatch_out_7_1;
  tmp_29(7) <= delayMatch_out_8_1;
  tmp_29(8) <= delayMatch_out_9_1;

  tmp_31(0 TO 2) <= tmp_30(3 TO 5);

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_trueregionp29
  p0k_output : PROCESS (tmp_30, tmp_31)
  BEGIN
    k <= tmp_30;
    k(0 TO 2) <= tmp_31(0 TO 2);
  END PROCESS p0k_output;


  tmp_32(0 TO 2) <= tmp_30(3 TO 5);

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp32_trueregionp1
  p0k_1_output : PROCESS (tmp_30, tmp_32)
  BEGIN
    k_1 <= tmp_30;
    k_1(6 TO 8) <= tmp_32(0 TO 2);
  END PROCESS p0k_1_output;



  tmp_33_gen: FOR t_02 IN 0 TO 2 GENERATE
    tmp_33(t_02) <= k_2(1 + (3 * t_02));
  END GENERATE tmp_33_gen;


  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_trueregionp37
  p0k_2_output : PROCESS (k_2, tmp_33)
  BEGIN
    k_3 <= k_2;

    FOR t_03 IN 0 TO 2 LOOP
      k_3(3 * t_03) <= tmp_33(t_03);
    END LOOP;

  END PROCESS p0k_2_output;



  tmp_34_gen: FOR t_04 IN 0 TO 2 GENERATE
    tmp_34(t_04) <= k_2(1 + (3 * t_04));
  END GENERATE tmp_34_gen;


  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp40_trueregionp1
  p0k_3_output : PROCESS (k_2, tmp_34)
  BEGIN
    k_4 <= k_2;

    FOR t_05 IN 0 TO 2 LOOP
      k_4(2 + (3 * t_05)) <= tmp_34(t_05);
    END LOOP;

  END PROCESS p0k_3_output;


  k_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      k_5 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        k_5 <= tmp_35;
      END IF;
    END IF;
  END PROCESS k_reg_process;


  p68tmp_output : PROCESS (k_5, tmp_24, tmp_25)
  BEGIN

    FOR t_1 IN 0 TO 1 LOOP
      FOR t_06 IN 0 TO 2 LOOP
        tmp_36(t_06 + (3 * t_1)) <= k_5(to_integer(tmp_24(t_06) + resize(3 * tmp_25(t_1), 32)));
      END LOOP;
    END LOOP;

  END PROCESS p68tmp_output;


  p69k_output : PROCESS (tmp_36, w1)
  BEGIN

    FOR t_11 IN 0 TO 1 LOOP
      FOR t_07 IN 0 TO 2 LOOP
        k_2(t_07 + (3 * t_11)) <= tmp_36(t_07 + (3 * t_11));
      END LOOP;
    END LOOP;

    k_2(6 TO 8) <= w1(0 TO 2);
  END PROCESS p69k_output;


  
  tmp_37 <= k_2 WHEN tmp_15 = '0' ELSE
      k_4;

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp37
  
  tmp_38 <= tmp_37 WHEN tmp_13 = '0' ELSE
      tmp_27;

  
  tmp_30 <= tmp_38 WHEN tmp_13 = '0' ELSE
      k_3;

  
  tmp_39 <= tmp_30 WHEN tmp_11 = '0' ELSE
      k_1;

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp29
  
  tmp_40 <= tmp_39 WHEN tmp_9 = '0' ELSE
      tmp_29;

  
  tmp_35 <= tmp_40 WHEN tmp_9 = '0' ELSE
      k;

  -- CONVOLUTION
  p25_output : PROCESS (tmp_35)
    VARIABLE Gx1 : signed(10 DOWNTO 0);
    VARIABLE gx1_0 : signed(10 DOWNTO 0);
    VARIABLE cast : vector_of_signed9(0 TO 2);
    VARIABLE mul_temp : vector_of_signed12(0 TO 2);
    VARIABLE add_cast : vector_of_signed11(0 TO 2);
  BEGIN
    gx1_0 := to_signed(16#000#, 11);
    Gx1 := to_signed(16#000#, 11);

    FOR i IN 0 TO 2 LOOP
      gx1_0 := Gx1;

      FOR j IN 0 TO 2 LOOP
        cast(j) := signed(resize(tmp_35(i + (3 * j)), 9));
        mul_temp(j) := cast(j) * Kx(i + (3 * j));
        add_cast(j) := mul_temp(j)(10 DOWNTO 0);
        gx1_0 := gx1_0 + add_cast(j);
      END LOOP;

      Gx1 := gx1_0;
    END LOOP;

    Gx1_1 <= Gx1;
  END PROCESS p25_output;


  
  tmp_41 <= '1' WHEN Gx1_1 < to_signed(16#000#, 11) ELSE
      '0';

  p24_output : PROCESS (tmp_35)
    VARIABLE Gy1 : signed(10 DOWNTO 0);
    VARIABLE gy1_0 : signed(10 DOWNTO 0);
    VARIABLE cast1 : vector_of_signed9(0 TO 2);
    VARIABLE mul_temp1 : vector_of_signed12(0 TO 2);
    VARIABLE add_cast1 : vector_of_signed11(0 TO 2);
  BEGIN
    gy1_0 := to_signed(16#000#, 11);
    Gy1 := to_signed(16#000#, 11);

    FOR i1 IN 0 TO 2 LOOP
      gy1_0 := Gy1;

      FOR j1 IN 0 TO 2 LOOP
        cast1(j1) := signed(resize(tmp_35(i1 + (3 * j1)), 9));
        mul_temp1(j1) := cast1(j1) * Ky(i1 + (3 * j1));
        add_cast1(j1) := mul_temp1(j1)(10 DOWNTO 0);
        gy1_0 := gy1_0 + add_cast1(j1);
      END LOOP;

      Gy1 := gy1_0;
    END LOOP;

    Gy1_1 <= Gy1;
  END PROCESS p24_output;


  
  tmp_42 <= '1' WHEN Gy1_1 < to_signed(16#000#, 11) ELSE
      '0';

  p21tmp_1 <=  - (resize(Gx1_1, 12));
  tmp_43 <= p21tmp_1(10 DOWNTO 0);

  
  tmp_44 <= Gx1_1 WHEN tmp_41 = '0' ELSE
      tmp_43;

  p23tmp_1 <=  - (resize(Gy1_1, 12));
  tmp_45 <= p23tmp_1(10 DOWNTO 0);

  
  tmp_46 <= Gy1_1 WHEN tmp_42 = '0' ELSE
      tmp_45;

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_falseregionp10
  p15Gd_add_temp <= resize(tmp_44, 12) + resize(tmp_46, 12);
  p15Gd_cast <= unsigned(p15Gd_add_temp(10 DOWNTO 0));
  p15Gd_cast_1 <= p15Gd_cast & '0' & '0';
  p15Gd_cast_2 <= SHIFT_RIGHT(p15Gd_cast_1, 2);
  p15Gd_cast_3 <= p15Gd_cast_2(12 DOWNTO 2);
  Gd <= p15Gd_cast_3(8 DOWNTO 0);

  
  tmp_47 <= '1' WHEN Gd > to_unsigned(16#0FF#, 9) ELSE
      '0';

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_trueregionp10
  ex <= to_unsigned(16#0FF#, 9);

  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_7 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_7(0) <= data_out_1;
        delayMatch_reg_7(1) <= delayMatch_reg_7(0);
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;

  data_out_2 <= delayMatch_reg_7(1);

  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_8 <= (OTHERS => to_unsigned(16#000#, 9));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_8(0) <= ex;
        delayMatch_reg_8(1) <= delayMatch_reg_8(0);
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;

  ex_1 <= delayMatch_reg_8(1);

  
  tmp_48 <= Gd WHEN tmp_47 = '0' ELSE
      ex_1;

  -- HDL code generation from MATLAB function: sobel_edge_detection_fixpt_trueregionp3
  tmp_49 <= tmp_48(7 DOWNTO 0);

  
  tmp_50 <= data_out_2 WHEN tmp_7 = '0' ELSE
      tmp_49;

  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_out_tmp <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        data_out_tmp <= tmp_50;
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;


  data_out <= std_logic_vector(data_out_tmp);

  ce_out <= clk_enable;

END rtl;

